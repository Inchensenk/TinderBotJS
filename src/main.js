const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list = []
    }

    async start(message) {
        this.mode = "main";
        const text = this.loadMessage('main')
        await this.sendImage('main')
        await this.sendText(text);

        //add menu
        await this.showMainMenu({
            'start': '-–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞',
            'profile': '-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé',
            'opener': '-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞',
            'message': '-–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà',
            'date': '-–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•',
            'gpt': '-–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†',
            'html': '-–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è html',
        })


    }

    async hello(message) {
        if (this.mode === 'gpt') {
            await this.gptDialog(message);
        } else if (this.mode === 'date') {
            await this.dateDialog(message);
        } else if (this.mode === 'message') {
            await this.messageDialog(message);
        } else {
            const text = message.text
            await this.sendText('<b>–ü—Ä–∏–≤–µ–¥</b>');
            await this.sendText('<i>–ö–∞–∫ –æ–Ω–æ?</i>');
            await this.sendText(`–¢—ã –Ω–∞–ø–∏—Å–∞–ª: ${text}`);

            await this.sendImage("avatar_main");

            await this.sendTextButtons("–ö–∞–∫–∞—è —É –í–∞—Å —Ç–µ–º–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º?", {
                'theme_light': '–°–≤–µ—Ç–ª–∞—è',
                'theme_dark': '–¢–µ–º–Ω–∞—è'
            });
        }

    }

    async helloButton(callbackQuery) {
        const query = callbackQuery.data;
        if (query === 'theme_light') {
            await this.sendText("Click on 'theme_light' button");
        } else if (query === 'theme_dark') {
            await this.sendText("Click on 'theme_dark' button");
        }
    }

    async html(message) {
        await this.sendHTML('<h3 STYLE="color: #1558b0">–ü–†–ò–í–ï–¢!</h3>');
        const html = this.loadHtml("main");
        await this.sendHTML(html, {
            theme: 'dark'
        });
    }

    async gpt(message) {
        this.mode = "gpt";
        const text = this.loadMessage('gpt');
        await this.sendImage('gpt');
        await this.sendText(text);
    }

    async gptDialog(message) {
        const text = message.text;
        const myMessage = await this.sendText('–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
        const answer = await chatGpt.sendQuestion("–æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", text);
        await this.editText(myMessage, answer);
    }


    async date(message) {
        this.mode = "date"
        const text = this.loadMessage('date');
        await this.sendImage('date');
        await this.sendTextButtons(text, {
            'date_grande': '–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ',
            'date_robbie': '–ú–∞—Ä–≥–æ –†–æ–±–±–∏',
            'date_zendaya': '–ó–µ–Ω–¥–µ—è',
            'date_gosling': '–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥',
            'date_hardy': '–¢–æ–º –•–∞—Ä–¥–∏',
        });
    }

    async dateButton(callbackQuery) {
        const query = callbackQuery.data;
        await this.sendImage(query);
        await this.sendText('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏ –¥–µ–≤—É—à–∫—É –∏–ª–∏ –ø–∞—Ä–Ω—è –Ω–≤ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π!)');

        const prompt = this.loadPrompt(query);
        await chatGpt.setPrompt(prompt);
    }

    async dateDialog(message) {
        const text = message.text;
        const myMessage = await this.sendText('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...');
        const answer = await chatGpt.addMessage(text);
        // await this.sendText(answer);
        await this.editText(myMessage, answer)
    }

    async message(message) {
        this.mode = 'message';
        const text = this.loadMessage('message');
        await this.sendImage('message');
        await this.sendText(text);
        await this.sendTextButtons(text, {
            'message_next': '–°–¥–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            'message_date': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ'
        })
    }

    async messageButton(callbackQuery) {
        const query = callbackQuery.data;
        const prompt = this.loadPrompt(query);
        const userChatHistory = this.list.join('\n\n');

        const myMessage = await this.sendText('ChatGPT –¥—É–º–∞–µ—Ç...');
        const answer = await chatGpt.sendQuestion(prompt, userChatHistory);
        await this.editText(myMessage, answer);
    }

    async messageDialog(message) {
        const text = message.text;
        this.list.push(text);
    }
}

const chatGpt = new ChatGptService("gpt:h4CQINi3RUNETJprJI4HJFkblB3TYAWTNapKtwbtLBVoSgEz")
const bot = new MyTelegramBot("7323942173:AAHwfPheYy50Xp5FG1ZYZN62N0MQPWezLuo");
bot.onCommand(/\/start/, bot.start); // /start
bot.onCommand(/\/html/, bot.html); // /html
bot.onCommand(/\/gpt/, bot.gpt); // /gpt
bot.onCommand(/\/date/, bot.date); // /date
bot.onCommand(/\/message/, bot.message); // /message

bot.onTextMessage(bot.hello);
bot.onButtonCallback(/^date_.*/, bot.dateButton) // –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å date_, . –∑–Ω–∞—á–∏—Ç –ª—é–±–æ–π —Å–∏–º–≤–æ–ª, * –∑–Ω–∞—á–∏—Ç –ª—é–±–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–±—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
bot.onButtonCallback(/^message_.*/, bot.messageButton)
bot.onButtonCallback(/^.*/, bot.helloButton) // any string

